'use client';

import { useState, useRef, useEffect, memo } from 'react';
import { 
  Plus, X, Edit2, MoreHorizontal, FileCode, CheckCircle2, Hash, FileCode2, Copy, 
  Download, Upload, Trash2, Settings, ExternalLink, Brain 
} from 'lucide-react';
import { useFlowStore } from '@/store/use-flow-store';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
  DropdownMenuLabel,
  DropdownMenuGroup,
} from '@/components/ui/dropdown-menu';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { Tabs, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { cn } from '@/lib/utils';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import PracticeChallenge from '@/components/practice-challenge';

function FlowTabs() {
  const [isNewPageDialogOpen, setIsNewPageDialogOpen] = useState(false);
  const [isRenameDialogOpen, setIsRenameDialogOpen] = useState(false);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [isShareDialogOpen, setIsShareDialogOpen] = useState(false);
  const [isPracticeChallengeOpen, setIsPracticeChallengeOpen] = useState(false);
  const [newPageName, setNewPageName] = useState('');
  const [editingPageId, setEditingPageId] = useState<string | null>(null);
  const [editingPageName, setEditingPageName] = useState('');
  const [deletingPageId, setDeletingPageId] = useState<string | null>(null);
  const [sharingPageId, setSharingPageId] = useState<string | null>(null);
  const [shareUrl, setShareUrl] = useState('');
  const [copyStatus, setCopyStatus] = useState<'idle' | 'copied'>('idle');
  const [indicatorStyle, setIndicatorStyle] = useState({ left: 0, width: 0 });
  const tabsRef = useRef<Map<string, HTMLButtonElement>>(new Map());

  // Select only the state and actions needed for tabs
  const pages = useFlowStore(state => state.pages);
  const currentPageId = useFlowStore(state => state.currentPageId);
  const createPage = useFlowStore(state => state.createPage);
  const deletePage = useFlowStore(state => state.deletePage);
  const renamePage = useFlowStore(state => state.renamePage);
  const setCurrentPage = useFlowStore(state => state.setCurrentPage);
  const getNodes = useFlowStore(state => state.getNodes);
  const getEdges = useFlowStore(state => state.getEdges);
  const setNodes = useFlowStore(state => state.setNodes);
  const setEdges = useFlowStore(state => state.setEdges);

  useEffect(() => {
    updateIndicator();
  }, [currentPageId, pages]);

  const updateIndicator = () => {
    if (currentPageId && tabsRef.current.has(currentPageId)) {
      const tabEl = tabsRef.current.get(currentPageId);
      if (tabEl) {
        const { offsetLeft, offsetWidth } = tabEl;
        setIndicatorStyle({
          left: offsetLeft,
          width: offsetWidth,
        });
      }
    }
  };

  const handleCreatePage = () => {
    if (newPageName.trim()) {
      createPage(newPageName.trim());
      setNewPageName('');
      setIsNewPageDialogOpen(false);
    }
  };

  const handleRenamePage = () => {
    if (editingPageName.trim() && editingPageId) {
      renamePage(editingPageId, editingPageName.trim());
      setEditingPageId(null);
      setEditingPageName('');
      setIsRenameDialogOpen(false);
    }
  };

  const handleDuplicatePage = (pageId: string) => {
    const originalPage = pages.find(p => p.id === pageId);
    if (originalPage) {
      const newName = `${originalPage.name} Copy`;
      createPage(newName);
    }
  };

  const handleDeletePage = () => {
    if (deletingPageId) {
      deletePage(deletingPageId);
      setDeletingPageId(null);
      setIsDeleteDialogOpen(false);
    }
  };

  const handleExportPython = (pageId: string) => {
    const page = pages.find(p => p.id === pageId);
    if (!page) return;

    // Create a Python file content (you can customize this based on your needs)
    const pythonContent = `# ${page.name}
# Generated by PyDrag

def main():
    # Your flow logic here
    pass

if __name__ == "__main__":
    main()
`;

    // Create blob and download
    const blob = new Blob([pythonContent], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${page.name.toLowerCase().replace(/\s+/g, '_')}.py`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  };

  const handleShare = (pageId: string) => {
    const page = pages.find(p => p.id === pageId);
    if (!page) return;
    
    // Generate a share URL (replace with your actual sharing logic)
    const shareUrl = `${window.location.origin}/flow/${pageId}`;
    setShareUrl(shareUrl);
    setSharingPageId(pageId);
    setIsShareDialogOpen(true);
  };

  const handleCopyShareLink = async () => {
    try {
      await navigator.clipboard.writeText(shareUrl);
      setCopyStatus('copied');
      setTimeout(() => setCopyStatus('idle'), 2000);
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  const handleExportFlow = (pageId: string) => {
    const page = pages.find(p => p.id === pageId);
    if (!page) return;

    // Get the flow data including nodes and edges
    const flowData = {
      name: page.name,
      nodes: getNodes(),
      edges: getEdges(),
      id: page.id,
      timestamp: new Date().toISOString()
    };

    // Create and download the flow file
    const blob = new Blob([JSON.stringify(flowData, null, 2)], { type: 'application/json' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${page.name.toLowerCase().replace(/\s+/g, '_')}_flow.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  };

  const handleImportFlow = async (file: File) => {
    try {
      const content = await file.text();
      const flowData = JSON.parse(content);
      
      // Create a new flow with the imported data
      const newFlowName = `${flowData.name} (Imported)`;
      const newPageId = createPage(newFlowName);
      
      if (newPageId) {
        // Set the nodes and edges
        setNodes(flowData.nodes);
        setEdges(flowData.edges);
        setCurrentPage(newPageId);
      }
    } catch (error) {
      console.error('Error importing flow:', error);
      // You might want to show an error toast here
    }
  };

  // Color variations for tabs
  const tabColors = [
    { bg: 'bg-blue-500/10', border: 'border-blue-500/30', icon: 'text-blue-500', hover: 'hover:bg-blue-500/15' },
    { bg: 'bg-purple-500/10', border: 'border-purple-500/30', icon: 'text-purple-500', hover: 'hover:bg-purple-500/15' },
    { bg: 'bg-green-500/10', border: 'border-green-500/30', icon: 'text-green-500', hover: 'hover:bg-green-500/15' },
    { bg: 'bg-orange-500/10', border: 'border-orange-500/30', icon: 'text-orange-500', hover: 'hover:bg-orange-500/15' },
    { bg: 'bg-red-500/10', border: 'border-red-500/30', icon: 'text-red-500', hover: 'hover:bg-red-500/15' },
    { bg: 'bg-pink-500/10', border: 'border-pink-500/30', icon: 'text-pink-500', hover: 'hover:bg-pink-500/15' },
    { bg: 'bg-indigo-500/10', border: 'border-indigo-500/30', icon: 'text-indigo-500', hover: 'hover:bg-indigo-500/15' },
  ];

  // Get color for a specific tab based on its index
  const getTabColor = (index: number) => {
    return tabColors[index % tabColors.length];
  };

  return (
    <div className="flex flex-col relative overflow-hidden">
      {/* Remove subtle background gradient for cleaner look */}
      
      <Tabs value={currentPageId || ''} onValueChange={setCurrentPage} className="w-full">
        <div className="relative flex items-center px-3 py-2 bg-background border-b overflow-x-auto no-scrollbar z-10">
          <TabsList className="h-auto p-0 bg-transparent space-x-2">
            {pages.map((page, index) => {
              const isActive = currentPageId === page.id;
              const color = getTabColor(index);
              
              return (
                <TabsTrigger
                  key={page.id}
                  value={page.id}
                  ref={(el) => {
                    if (el) tabsRef.current.set(page.id, el);
                    else tabsRef.current.delete(page.id);
                  }}
                  className={cn(
                    "relative data-[state=active]:shadow-none",
                    "flex items-center h-9 px-4 gap-2 max-w-[180px] min-w-[140px]",
                    "transition-all duration-200 ease-out",
                    "rounded-md border-2",
                    isActive ? [
                      "bg-white dark:bg-slate-900",
                      color.border,
                      "shadow-md"
                    ] : [
                      "bg-muted/20 border-transparent",
                      "hover:border-muted/50",
                      color.hover
                    ]
                  )}
                  disabled={!!editingPageId}
                >
                  <div className={cn(
                    "h-6 w-6 rounded-md flex items-center justify-center flex-shrink-0",
                    "transition-colors duration-300",
                    isActive ? [
                      color.bg,
                      color.icon
                    ] : [
                      "bg-muted/40 text-muted-foreground",
                      "group-hover:" + color.icon
                    ]
                  )}>
                    <Hash className="h-3.5 w-3.5" />
                  </div>
                  
                  {editingPageId === page.id ? (
                    <form
                      onSubmit={(e) => {
                        e.preventDefault();
                        handleRenamePage();
                      }}
                      className="flex-1 flex items-center mr-1"
                      onClick={(e) => e.stopPropagation()}
                    >
                      <Input
                        value={editingPageName}
                        onChange={(e) => setEditingPageName(e.target.value)}
                        className="h-6 text-sm min-w-0 px-1 border-none bg-background/50 focus-visible:ring-primary/20 focus-visible:ring-offset-0"
                        autoFocus
                      />
                      <Button
                        type="submit"
                        size="icon"
                        variant="ghost"
                        className="h-5 w-5 p-0 ml-0.5 text-primary"
                      >
                        <X className="h-3.5 w-3.5" />
                      </Button>
                    </form>
                  ) : (
                    <>
                      <span className={cn(
                        "text-sm font-medium truncate flex-1",
                        isActive && color.icon
                      )}>
                        {page.name}
                      </span>

                      {/* Action Menu */}
                      {!editingPageId && (
                        <div
                          onClick={(e) => e.stopPropagation()}
                          className="relative flex items-center"
                        >
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <div className={cn(
                                "h-5 w-5 p-0 rounded-md",
                                "hover:bg-muted/40 cursor-pointer",
                                "flex items-center justify-center",
                                "transition-colors duration-200",
                                "opacity-0 group-hover:opacity-100",
                                isActive && "opacity-100"
                              )}>
                                <MoreHorizontal className="h-3 w-3" />
                              </div>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent
                              align="end"
                              side="bottom"
                              sideOffset={4}
                              alignOffset={-4}
                              className={cn(
                                "w-56 p-2",
                                "animate-in fade-in-0 zoom-in-95",
                                "data-[side=bottom]:slide-in-from-top-2",
                                "data-[side=top]:slide-in-from-bottom-2"
                              )}
                            >
                              <DropdownMenuLabel className={cn(
                                "text-xs font-normal text-muted-foreground",
                                "px-2 py-1.5"
                              )}>
                                Flow Actions
                              </DropdownMenuLabel>
                              
                              <DropdownMenuGroup>
                                <DropdownMenuItem
                                  className={cn(
                                    "flex items-center gap-2",
                                    "rounded-sm h-8 text-xs",
                                    "px-2 py-1.5",
                                    "cursor-pointer",
                                    "transition-colors duration-200",
                                    "focus:bg-accent/50"
                                  )}
                                  onClick={() => {
                                    setEditingPageId(page.id);
                                    setEditingPageName(page.name);
                                    setIsRenameDialogOpen(true);
                                  }}
                                >
                                  <Edit2 className="h-3.5 w-3.5" />
                                  <span className="flex-1">Rename Flow</span>
                                  <DropdownMenuShortcut>⌘R</DropdownMenuShortcut>
                                </DropdownMenuItem>
                                
                                <DropdownMenuItem
                                  className={cn(
                                    "flex items-center gap-2",
                                    "rounded-sm h-8 text-xs",
                                    "px-2 py-1.5",
                                    "cursor-pointer",
                                    "transition-colors duration-200",
                                    "focus:bg-accent/50"
                                  )}
                                  onClick={() => handleDuplicatePage(page.id)}
                                >
                                  <Copy className="h-3.5 w-3.5" />
                                  <span className="flex-1">Duplicate Flow</span>
                                  <DropdownMenuShortcut>⌘D</DropdownMenuShortcut>
                                </DropdownMenuItem>
                              </DropdownMenuGroup>

                              <DropdownMenuSeparator className="my-1.5 bg-border/40" />
                              
                              <DropdownMenuGroup>
                                <DropdownMenuSub>
                                  <DropdownMenuSubTrigger 
                                    className={cn(
                                      "flex items-center gap-2",
                                      "rounded-sm h-8 text-xs",
                                      "px-2 py-1.5",
                                      "cursor-pointer",
                                      "transition-colors duration-200",
                                      "focus:bg-accent/50"
                                    )}
                                  >
                                    <FileCode2 className="h-3.5 w-3.5" />
                                    <span className="flex-1">Export Flow</span>
                                  </DropdownMenuSubTrigger>
                                  <DropdownMenuSubContent 
                                    className={cn(
                                      "w-48 p-2",
                                      "animate-in fade-in-0 zoom-in-95",
                                      "data-[side=right]:slide-in-from-left-2",
                                      "data-[side=left]:slide-in-from-right-2"
                                    )}
                                  >
                                    <DropdownMenuItem 
                                      className={cn(
                                        "flex items-center gap-2",
                                        "rounded-sm h-8 text-xs",
                                        "px-2 py-1.5",
                                        "cursor-pointer",
                                        "transition-colors duration-200",
                                        "focus:bg-accent/50"
                                      )}
                                      onClick={() => handleExportPython(page.id)}
                                    >
                                      <Download className="h-3.5 w-3.5" />
                                      <span className="flex-1">As Python File</span>
                                      <DropdownMenuShortcut>⌘E</DropdownMenuShortcut>
                                    </DropdownMenuItem>
                                    <DropdownMenuItem 
                                      className={cn(
                                        "flex items-center gap-2",
                                        "rounded-sm h-8 text-xs",
                                        "px-2 py-1.5",
                                        "cursor-pointer",
                                        "transition-colors duration-200",
                                        "focus:bg-accent/50"
                                      )}
                                      onClick={() => handleShare(page.id)}
                                    >
                                      <ExternalLink className="h-3.5 w-3.5" />
                                      <span className="flex-1">Share Link</span>
                                      <DropdownMenuShortcut>⌘S</DropdownMenuShortcut>
                                    </DropdownMenuItem>
                                    <DropdownMenuItem 
                                      className={cn(
                                        "flex items-center gap-2",
                                        "rounded-sm h-8 text-xs",
                                        "px-2 py-1.5",
                                        "cursor-pointer",
                                        "transition-colors duration-200",
                                        "focus:bg-accent/50"
                                      )}
                                      onClick={() => handleExportFlow(page.id)}
                                    >
                                      <Download className="h-3.5 w-3.5" />
                                      <span className="flex-1">Export Flow</span>
                                      <DropdownMenuShortcut>⌘⇧E</DropdownMenuShortcut>
                                    </DropdownMenuItem>
                                  </DropdownMenuSubContent>
                                </DropdownMenuSub>

                                <DropdownMenuItem
                                  className={cn(
                                    "flex items-center gap-2",
                                    "rounded-sm h-8 text-xs",
                                    "px-2 py-1.5",
                                    "cursor-pointer",
                                    "transition-colors duration-200",
                                    "focus:bg-accent/50"
                                  )}
                                >
                                  <Settings className="h-3.5 w-3.5" />
                                  <span className="flex-1">Flow Settings</span>
                                  <DropdownMenuShortcut>⌘,</DropdownMenuShortcut>
                                </DropdownMenuItem>
                              </DropdownMenuGroup>

                              <DropdownMenuSeparator className="my-1.5 bg-border/40" />
                              
                              <DropdownMenuGroup>
                                <DropdownMenuItem
                                  className={cn(
                                    "flex items-center gap-2",
                                    "rounded-sm h-8 text-xs",
                                    "px-2 py-1.5",
                                    "cursor-pointer",
                                    "transition-colors duration-200",
                                    "focus:bg-accent/50",
                                    "text-destructive focus:text-destructive",
                                    "data-[highlighted]:text-destructive"
                                  )}
                                  onClick={() => {
                                    setDeletingPageId(page.id);
                                    setIsDeleteDialogOpen(true);
                                  }}
                                >
                                  <Trash2 className="h-3.5 w-3.5" />
                                  <span className="flex-1">Delete Flow</span>
                                  <DropdownMenuShortcut>⌫</DropdownMenuShortcut>
                                </DropdownMenuItem>
                              </DropdownMenuGroup>
                            </DropdownMenuContent>
                          </DropdownMenu>
                        </div>
                      )}
                    </>
                  )}
                </TabsTrigger>
              );
            })}
          </TabsList>

          {/* Rename Dialog */}
          <Dialog open={isRenameDialogOpen} onOpenChange={setIsRenameDialogOpen}>
            <DialogContent className="sm:max-w-[400px] border border-border/40 shadow-lg rounded-lg bg-background/95 backdrop-blur-lg">
              <DialogHeader>
                <DialogTitle>Rename Flow</DialogTitle>
                <DialogDescription>
                  Enter a new name for your flow.
                </DialogDescription>
              </DialogHeader>
              <form onSubmit={(e) => { e.preventDefault(); handleRenamePage(); }}>
                <div className="grid gap-4 py-4">
                  <Input
                    value={editingPageName}
                    onChange={(e) => setEditingPageName(e.target.value)}
                    placeholder="Flow name"
                    className="col-span-3 focus-visible:ring-primary/30"
                    autoFocus
                  />
                </div>
                <DialogFooter>
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => {
                      setIsRenameDialogOpen(false);
                      setEditingPageId(null);
                      setEditingPageName('');
                    }}
                    className="text-sm"
                  >
                    Cancel
                  </Button>
                  <Button type="submit" className="text-sm">
                    Rename Flow
                  </Button>
                </DialogFooter>
              </form>
            </DialogContent>
          </Dialog>

          {/* Delete Dialog */}
          <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
            <DialogContent className="sm:max-w-[400px] border border-border/40 shadow-lg rounded-lg bg-background/95 backdrop-blur-lg">
              <DialogHeader>
                <DialogTitle className="text-destructive">Delete Flow</DialogTitle>
                <DialogDescription>
                  Are you sure you want to delete this flow? This action cannot be undone.
                </DialogDescription>
              </DialogHeader>
              <div className="flex items-center gap-3 pt-4">
                <Button
                  type="button"
                  variant="outline"
                  className="flex-1 text-sm"
                  onClick={() => {
                    setIsDeleteDialogOpen(false);
                    setDeletingPageId(null);
                  }}
                >
                  Cancel
                </Button>
                <Button
                  type="button"
                  variant="destructive"
                  className="flex-1 text-sm gap-2"
                  onClick={handleDeletePage}
                >
                  <Trash2 className="h-3.5 w-3.5" />
                  Delete Flow
                </Button>
              </div>
            </DialogContent>
          </Dialog>

          {/* New Tab Button */}
          <Dialog open={isNewPageDialogOpen} onOpenChange={setIsNewPageDialogOpen}>
            <DialogTrigger asChild>
              <Button
                size="sm"
                variant="outline"
                className={cn(
                  "ml-2 h-8 text-xs gap-1 rounded-md border-dashed",
                  "bg-background/50 hover:bg-background transition-colors",
                  "text-muted-foreground hover:text-foreground"
                )}
              >
                <Plus className="h-3.5 w-3.5" />
                <span>New Flow</span>
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[400px] border border-border/40 shadow-lg rounded-lg bg-background/95 backdrop-blur-lg">
              <DialogHeader>
                <DialogTitle>Create New Flow</DialogTitle>
                <DialogDescription>
                  Give your new flow a name. You can change this later.
                </DialogDescription>
              </DialogHeader>
              <form onSubmit={(e) => { e.preventDefault(); handleCreatePage(); }}>
                <div className="grid gap-4 py-4">
                  <Input
                    value={newPageName}
                    onChange={(e) => setNewPageName(e.target.value)}
                    placeholder="My Awesome Flow"
                    className="col-span-3 focus-visible:ring-primary/30"
                    autoFocus
                  />
                </div>
                <DialogFooter>
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => setIsNewPageDialogOpen(false)}
                    className="text-sm"
                  >
                    Cancel
                  </Button>
                  <Button type="submit" className="text-sm">
                    Create Flow
                  </Button>
                </DialogFooter>
              </form>
            </DialogContent>
          </Dialog>

          {/* Import Flow Button */}
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <div className="relative">
                  <input
                    type="file"
                    id="flow-import"
                    accept=".json"
                    className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                    onChange={(e) => {
                      const file = e.target.files?.[0];
                      if (file) {
                        handleImportFlow(file);
                        e.target.value = ''; // Reset input
                      }
                    }}
                  />
                  <Button
                    size="sm"
                    variant="outline"
                    className={cn(
                      "ml-2 h-8 text-xs gap-1 rounded-md border-dashed",
                      "bg-background/50 hover:bg-background transition-colors",
                      "text-muted-foreground hover:text-foreground"
                    )}
                  >
                    <Upload className="h-3.5 w-3.5" />
                    <span>Import Flow</span>
                  </Button>
                </div>
              </TooltipTrigger>
              <TooltipContent side="bottom" align="center">
                Import a flow from a JSON file
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>

          {/* Practice Challenge Button */}
          <Dialog open={isPracticeChallengeOpen} onOpenChange={setIsPracticeChallengeOpen}>
            <DialogTrigger asChild>
              <Button
                size="sm"
                variant="outline"
                className={cn(
                  "ml-2 h-8 text-xs gap-1 rounded-md",
                  "bg-purple-500/10 hover:bg-purple-500/15 transition-colors",
                  "text-purple-500 border-purple-500/30"
                )}
              >
                <Brain className="h-3.5 w-3.5" />
                <span>Challenges</span>
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[500px] p-0 border border-border/40 shadow-lg rounded-lg bg-background/95 backdrop-blur-lg">
              <PracticeChallenge />
            </DialogContent>
          </Dialog>

          {/* Share Dialog */}
          <Dialog open={isShareDialogOpen} onOpenChange={setIsShareDialogOpen}>
            <DialogContent className="sm:max-w-[400px] border border-border/40 shadow-lg rounded-lg bg-background/95 backdrop-blur-lg">
              <DialogHeader>
                <DialogTitle>Share Flow</DialogTitle>
                <DialogDescription>
                  Anyone with the link can view this flow.
                </DialogDescription>
              </DialogHeader>
              <div className="flex flex-col gap-4 py-4">
                <div className="flex items-center gap-2">
                  <Input
                    value={shareUrl}
                    readOnly
                    className="flex-1 text-sm h-9 bg-muted/30 focus-visible:ring-primary/30"
                  />
                  <Button
                    type="button"
                    variant="outline"
                    className={cn(
                      "h-9 px-3 text-xs gap-2",
                      copyStatus === 'copied' && "text-green-500 border-green-500/30"
                    )}
                    onClick={handleCopyShareLink}
                  >
                    {copyStatus === 'copied' ? (
                      <>
                        <CheckCircle2 className="h-3.5 w-3.5" />
                        Copied!
                      </>
                    ) : (
                      <>
                        <Copy className="h-3.5 w-3.5" />
                        Copy Link
                      </>
                    )}
                  </Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        </div>
      </Tabs>
    </div>
  );
}

export default memo(FlowTabs);